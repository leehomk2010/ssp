<?xml version="1.0" encoding="UTF-8" ?>
		<!DOCTYPE mapper
				PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
				"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="Report">

	<resultMap id="RM_Report" type="com.es.ssp.model.Report">
        <result property="reportId" column="reportId"/>
        <result property="fansId" column="fansId"/>
        <result property="createTime" column="createTime"/>
        <result property="happenTime" column="happenTime"/>
        <result property="happenPlace" column="happenPlace"/>
        <result property="eventDesc" column="eventDesc"/>
        <result property="descVoice" column="descVoice"/>
        <result property="descImages" column="descImages"/>
        <result property="descVideo" column="descVideo"/>
        <result property="status" column="status"/>
        <result property="reportType1" column="reportType1"/>
        <result property="reportType2" column="reportType2"/>
        <result property="prizeStatus1" column="prizeStatus1"/>
        <result property="prizeStatus2" column="prizeStatus2"/>
        <result property="remark" column="remark"/>
        <result property="reply" column="reply"/>
	<association property="operateRecords" column="reportId" fetchType="lazy"
				 select="OperateRecord.findByReportId" />
	<association property="prizeRecords" column="reportId" fetchType="lazy"
				 select="PrizeRecord.findByReportId" />
	<association property="reportType" column="reportType2" fetchType="lazy"
			 select="ReportType.getById" />
	<association property="fans" column="fansId" fetchType="lazy"
			 select="Fans.getById" />
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="Report.columns">
	    <![CDATA[
		reportId,fansId,createTime,happenTime,happenPlace,eventDesc,descVoice,descImages,descVideo,status,reportType1,reportType2,prizeStatus1,prizeStatus2,remark,reply
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="Report.insert" useGeneratedKeys="true" keyProperty="reportId">
    <![CDATA[
        INSERT INTO report (
         reportId, fansId, createTime, happenTime, happenPlace, eventDesc, descVoice, descImages, descVideo, status, reportType1, reportType2, prizeStatus1, prizeStatus2, remark, reply
        ) VALUES (
         #{reportId}, #{fansId}, #{createTime}, #{happenTime}, #{happenPlace}, #{eventDesc}, #{descVoice}, #{descImages}, #{descVideo}, #{status}, #{reportType1}, #{reportType2}, #{prizeStatus1}, #{prizeStatus2}, #{remark}, #{reply}        
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="Report.update" >
    <![CDATA[
        UPDATE report SET
	        fansId = #{fansId} , createTime = #{createTime} , happenTime = #{happenTime} , happenPlace = #{happenPlace} , eventDesc = #{eventDesc} , descVoice = #{descVoice} , descImages = #{descImages} , descVideo = #{descVideo} , status = #{status} , reportType1 = #{reportType1} , reportType2 = #{reportType2} , prizeStatus1 = #{prizeStatus1} , prizeStatus2 = #{prizeStatus2} , remark = #{remark} , reply = #{reply}  
        WHERE 
        	reportId = #{reportId}  	        
    ]]>
	</update>

    <delete id="Report.delete">
    <![CDATA[
        DELETE FROM report WHERE
        reportId = #{id} 
    ]]>
    </delete>
    
    <select id="Report.getById" resultMap="RM_Report">
		SELECT <include refid="Report.columns" />
	    <![CDATA[
		    FROM report 
	        WHERE 
		        reportId = #{id} 
	    ]]>
	</select>
	
	<sql id="Report.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(reportId)">
				AND reportId = #{reportId}
			</if>
	       <if test="@Ognl@isNotEmpty(fansId)">
				AND fansId = #{fansId}
			</if>
	       <if test="@Ognl@isNotEmpty(createTime)">
				AND createTime = #{createTime}
			</if>
	       <if test="@Ognl@isNotEmpty(happenTime)">
				AND happenTime = #{happenTime}
			</if>
	       <if test="@Ognl@isNotEmpty(happenPlace)">
				AND happenPlace = #{happenPlace}
			</if>
	       <if test="@Ognl@isNotEmpty(eventDesc)">
				AND eventDesc = #{eventDesc}
			</if>
	       <if test="@Ognl@isNotEmpty(descVoice)">
				AND descVoice = #{descVoice}
			</if>
	       <if test="@Ognl@isNotEmpty(descImages)">
				AND descImages = #{descImages}
			</if>
	       <if test="@Ognl@isNotEmpty(descVideo)">
				AND descVideo = #{descVideo}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND status = #{status}
			</if>
	       <if test="@Ognl@isNotEmpty(reportType1)">
				AND reportType1 = #{reportType1}
			</if>
	       <if test="@Ognl@isNotEmpty(reportType2)">
				AND reportType2 = #{reportType2}
			</if>
	       <if test="@Ognl@isNotEmpty(prizeStatus1)">
				AND prizeStatus1 = #{prizeStatus1}
			</if>
	       <if test="@Ognl@isNotEmpty(prizeStatus2)">
				AND prizeStatus2 = #{prizeStatus2}
			</if>
	       <if test="@Ognl@isNotEmpty(remark)">
				AND remark = #{remark}
			</if>
	       <if test="@Ognl@isNotEmpty(reply)">
				AND reply = #{reply}
			</if>
		</where>
	</sql>
		
    <select id="Report.findPage.count" resultType="long">
        SELECT count(*) FROM report 
		<include refid="Report.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="Report.findPage" resultMap="RM_Report">
    	SELECT <include refid="Report.columns" />
	    FROM report 
		<include refid="Report.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
		LIMIT #{offset},#{limit}
    </select>


    <select id="Report.findByReportType2" resultMap="RM_Report">
        SELECT <include refid="Report.columns" />
        FROM report
        WHERE reportType2=#{id}
    </select>

    <select id="Report.findByFansId" resultMap="RM_Report">
        SELECT <include refid="Report.columns" />
        FROM report
        WHERE fansId=#{id}
    </select>


    <select id="Report.findAll" resultMap="RM_Report">
	    SELECT <include refid="Report.columns" />
		FROM report
		<include refid="Report.findPage.where"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
		<if test="@Ognl@isNotEmpty(limit)">
			LIMIT #{limit}
		</if>
	</select>
</mapper>

